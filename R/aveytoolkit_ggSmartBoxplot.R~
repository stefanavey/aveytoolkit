#' ProcessNames
#'
#' Cleans up strings to make them pretty names by removing punctuation, whitespace, and specified substrings
#'
#' @param strs vector or strings to process
#' @param stringsToRm a vector or list of strings to search for and remove from strs
#' @param rmPunct should punctuation be removed? Default is TRUE.
#' @param sep character to replace whitespace
#' @return a vector of modified strings from strs
#' @author Stefan Avey
#' @details stringsToRm are replaced by '' in the order they are given using gsub. After this, punctuation is removed if rmPunct is TRUE. Then, leading and/or trailing whitespace will be removed and the sep will be used to separate words. This function is useful when reading in other people's data and you want to change the row or column names to legal R names or just shorten the names.
#' @keywords aveytoolkit
#' @seealso \code{\link{gsub}}
#' @export
#' @examples
#' badNames <- c("Who's Birthday?", "[Date]", "gift Received")
#' ## Remove the string "Who's", remove punctuation, and separate words by '_'
#' goodNames <- ProcessNames(badNames,stringsToRm="Who's", rmPunct=TRUE, sep='_')
#' goodNames
#' ## Remove the string "Who's", don't remove punctuation, and put no separation between words
#' goodNames <- ProcessNames(badNames,stringsToRm="Who's", rmPunct=FALSE, sep='')
#' goodNames                          
ProcessNames <- function(strs, stringsToRm=NULL, rmPunct=TRUE, sep="_")  {
  for (str in stringsToRm)
    strs <- gsub(str, '', strs) # remove strings in stringsToRm
  if(rmPunct) # remove punctuation
    strs <- gsub("[[:punct:]]", '', strs)
  strs <- gsub("^[[:space:]]+|[[:space:]]+$", '', strs) # remove leading/trailing whitespace
  strs <- gsub('[[:space:]]+', sep, strs, fixed=FALSE) # change spaces to underscores
  return(strs)
}


### ggsmartBoxPlot - this will do some smart things using the labels to generate
### box plots from a matrix of data - using ggplot2
ggSmartBoxplot <- function(x, mat,splitBy, colorBy, rows, cols=NA,
                           whichCols=NA, sep='.', fileName=NA,
                           ...)
  {
    require(gtools)
    require(ggplot2)
    if(is.character(fileName))
      pdf(fileName)
    for(r in rows) {
      if(is.na(cols) && !is.na(whichCols)) {
        submat <- mat[r,whichCols]
        ## Find the common string separated  sep in the column names
      } else if (is.na(whichCols) && !is.na(cols)) {
        submat <- mat[r,grep(paste0(sep, cols, sep), colnames(mat), fixed=T)]
        }
      else
        stop("Must specify columns in cols or whichCols argument")
      ## x2 is defined 
      x2 <- as.numeric(as.factor(x)) +
        0.25*seq(from=-1, to=1,
                 length.out=length(levels(factor(colorBy))))[as.numeric(factor(colorBy))]
      dat <- data.frame(x=factor(x), x2=x2, vals=unlist(submat), splitBy=splitBy,
                      colorBy=factor(colorBy))
#      print(dat)
      ## Assign rownames as r or the rownames at row number r
      if(is.numeric(r))
        rowName <- rownames(mat)[r]
      else
        rowName <- r
#f <- ggplot(dat, aes(x=x, y=vals)) +                                       
#        scale_x_discrete() +
#          geom_boxplot(aes(fill=colorBy), color=c("yellow", "blue"), outlier.shape=NA,
#                       position=position_dodge(1)) +
      f <- qplot(x, vals, data = dat, geom="boxplot", ylab=rowName, fill=colorBy,
                 position=position_dodge(1),
                 outlier.shape=NA,
                 ...) +
                   scale_fill_manual(name="", breaks=factor(colorBy),
                                     values=c("yellow", "blue")
                                     ) +
          geom_jitter(aes(x=x2), position=position_jitter(width=0.1)) +
            facet_grid(.~splitBy, scales="free", space="free") +                         
              theme_bw() +
                theme(plot.margin=unit(c(5, 0, 5, 10), "mm"),
                      text=element_text(size=16),
                      axis.title.x = element_text(vjust=-.75),
                      axis.title.y = element_text(vjust=0))
      plot(f)
    }
    if(is.character(fileName))
      dev.off()
  }


